import { z } from "zod"
import { createOption, createOptionSchema, Option, None } from "../../Option"

{%- for imp in imports %}
 {{ imp }}
{%- endfor %}

export class {{ name }}{% if baseclass is not none %} extends {{ baseclass }}{% endif %} {
    {%- for prop in class_properties %}
    {{ prop.name }}{% if prop.optional %}?{% endif %}: {{ prop.type }} {% if prop.default is defined %}= {{ prop.default }}{% endif %}
    {%- endfor %}

    constructor(init: z.infer<typeof {{ name }}Schema>) {
        {% if baseclass is not none -%}
        super(init)
        {%- endif %}
        {%- for prop in class_properties %}
        this.{{ prop.name }} = {% if prop.complex %}{{ prop.creation("init." + prop.name) }}{% else %}init.{{ prop.name }}{% endif %}
        {%- endfor %}
    }

    static fromJSON(parsedJSON: any) {
        const validated = {{ name }}Schema.parse(parsedJSON)
        return new {{ name }}(validated)
    }

    static getSchema() {
        return {{ name }}Schema
    }
}

export const {{ name }}Schema = {% if baseclass is not none%}{{ baseclass }}Schema.extend{% else %}z.object{% endif %}({
    {%- for prop in z_properties %}
    {{ prop }},
    {%-  endfor %}
})