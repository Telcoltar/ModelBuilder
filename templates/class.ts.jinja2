import { z } from "zod"
import { createOption, createOptionSchema, Option, None } from "../../Option/Option"
import {BaseModel} from "../common";

{%- for imp in imports %}
 {{ imp }}
{%- endfor %}

export class {{ name }} extends BaseModel {
    {%- for prop in class_properties %}
    {{ prop.name }}{% if prop.optional %}?{% endif %}: {{ prop.type }} {% if prop.default is defined %}= {{ prop.default }}{% endif %}
    {%- endfor %}

    constructor(
        {
        {%- for prop in class_properties -%}
            {{ prop.name }}{% if not loop.last %},{% endif %}
        {%- endfor -%}
        } :
        {
        {%- for prop in class_properties -%}
            {{ prop.name }}
            {%- if prop.default is defined or prop.optional %}?{% endif %}:
            {{- prop.type }}{% if not loop.last %},{% endif -%}
        {%- endfor -%}
        }
    ) {
        super()
        {%- for prop in class_properties %}
        {% if prop.default is defined -%}
        if ({{ prop.name }}) {
            this.{{ prop.name }} = {{ prop.name }}
        }
        {%- else -%}
        this.{{ prop.name }} = {{ prop.name }}
        {%- endif %}
        {%- endfor %}
    }

    static fromJSON(parsedJSON: any) {
        const validated = {{ name }}Schema.parse(parsedJSON)
        return new {{ name }}({
        {%- for prop in class_properties %}
            {{ prop.name }}: {% if prop.complex %}{{ prop.creation("validated." + prop.name) }}{% else %}validated.{{ prop.name }}{% endif %},
        {%- endfor %}
        })
    }
}

export const {{ name }}Schema = z.object({
    {%- for prop in z_properties %}
    {{ prop }},
    {%-  endfor %}
})